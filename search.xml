<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>dayjs源码解析</title>
      <link href="2021/05/18/dayjs-yuan-ma-jie-xi/"/>
      <url>2021/05/18/dayjs-yuan-ma-jie-xi/</url>
      
        <content type="html"><![CDATA[<p>本文内容基于<code>day.js</code>的<code>v1.10.4</code>版本，将主要从基础理念、工程架构、源码解析、插件体系和国际化体系来解析dayjs源码。</p><p>对时间相关的概念和API不熟悉的推荐先阅读上一篇文章<a href="https://star.qingzz.cn/2021/05/14/shi-jian/">时间</a>。</p><h2 id="基础理念"><a href="#基础理念" class="headerlink" title="基础理念"></a>基础理念</h2><p><code>dayjs</code>是国内饿了么团队<code>iamkun</code>大佬开发，同时他也是<code>Element UI</code>的核心开发者。<code>dayjs</code>首次发布在2018年4月，开发初衷就是为了对标<code>momentjs</code>从而取代它，因此API的设计与<code>momentjs</code>完全一致。正如作者所说：</p><blockquote><p>Day.js is a minimalist JavaScript library that parses, validates, manipulates, and displays dates and times for modern browsers with a largely Moment.js-compatible API. If you use Moment.js, you already know how to use Day.js.</p></blockquote><p>那<code>dayjs</code>究竟解决了哪些<code>momentjs</code>的痛点？又是通过什么方式解决的呢？看完全文应该就会有答案。</p><h2 id="工程架构"><a href="#工程架构" class="headerlink" title="工程架构"></a>工程架构</h2><h3 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h3><p>通过<code>package.json</code>可以看到项目引入了<code>babel</code>用于兼容性转化，使用<code>karma</code>和<code>SauceLabs</code>进行浏览器兼容性测试，确保浏览器兼容性。另外使用<code>cross-env</code>确保<code>npm scripts</code>运行命令的兼容性。</p><h3 id="大小"><a href="#大小" class="headerlink" title="大小"></a>大小</h3><p><code>dayjs</code>为了确保最终打包大小在宣传的<code>2kb</code>，在项目引入了<code>size-limit</code>和<code>gzip-size-cli</code>，用于死守<code>2.99kb</code>大小的底线。当然，确保大小更重要的还是代码层面的设计，将<code>国际化体系</code>和<code>插件体系</code>独立在核心之外，这个在后面会有介绍。</p><h3 id="Typescript支持"><a href="#Typescript支持" class="headerlink" title="Typescript支持"></a>Typescript支持</h3><p><code>dayjs</code>使用<code>javascript</code>进行开发，为了支持<code>Typescript</code>，单独书写了各种类型和接口定义，放置在<code>types</code>文件夹下。</p><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><p><code>dayjs</code>主要使用<code>jest</code>进行单元测试，需要关注的是开发依赖里面包含<code>moment</code>和<code>moment-timezone</code>，安装这两个包主要是为了进行两者API一致性的单元测试。另外<code>mockdate</code>这个包是用于修改当前时间进行单元测试使用。</p><h3 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h3><p><code>dayjs</code>使用<code>rollup</code>进行打包压缩，并使用<code>ncp</code>进行代码拷贝输出结果。</p><h3 id="规范"><a href="#规范" class="headerlink" title="规范"></a>规范</h3><p>代码规范使用<code>eslint</code>和<code>prettier</code>来保障，<code>eslint</code>主要采用<code>airbnb</code>规范以优化<code>js</code>代码格式规范，<code>prettier</code>用于优化<code>markdown</code>文档格式规范。在提交代码时，使用<code>pre-commit</code>进行规范检测，确保提交的代码符合规范。</p><h3 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h3><p>版本发布使用<a href="https://travis-ci.com/"><code>Travis CI</code></a>进行，在提交代码时将安装<code>codecov</code>，执行规范检测，单元测试和代码代码覆盖率检测。发布时需要将代码合并到<code>master</code>分支，安装<code>@semantic-release/changelog</code> 、<code>@semantic-release/git</code>、<code>semantic-release</code>用于生成<code>CHANGELOG.md</code>代码变更记录，同时会执行单元测试，打包发布等流程。</p><h2 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h2><p><code>dayjs</code>的特点就是小而全，它的代码结构也非常简单，主要包含以下几个部分：</p><pre class="line-numbers language-none"><code class="language-none">src  ├── constant.js // 常量定义  ├── index.js    // 入口文件  ├── locale      // 国际化配置  ├── plugin      // 插件  └── utils.js    // 工具函数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>入口文件<code>index.js</code>前三行代码引入了<code>constant.js</code>、<code>locale/en.js</code>、<code>utils.js</code>，因此我们先看看这几个文件：</p><h3 id="常量定义：constant-js"><a href="#常量定义：constant-js" class="headerlink" title="常量定义：constant.js"></a>常量定义：constant.js</h3><p>这个文件主要包含一些常量定义：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 单位转换的命名可以学习：</span><span class="token comment">// 秒数转换</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">SECONDS_A_MINUTE</span> <span class="token operator">=</span> <span class="token number">60</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">SECONDS_A_HOUR</span> <span class="token operator">=</span> <span class="token constant">SECONDS_A_MINUTE</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">SECONDS_A_DAY</span> <span class="token operator">=</span> <span class="token constant">SECONDS_A_HOUR</span> <span class="token operator">*</span> <span class="token number">24</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">SECONDS_A_WEEK</span> <span class="token operator">=</span> <span class="token constant">SECONDS_A_DAY</span> <span class="token operator">*</span> <span class="token number">7</span><span class="token comment">// 毫秒数转换</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">MILLISECONDS_A_SECOND</span> <span class="token operator">=</span> <span class="token number">1e3</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">MILLISECONDS_A_MINUTE</span> <span class="token operator">=</span> <span class="token constant">SECONDS_A_MINUTE</span> <span class="token operator">*</span> <span class="token constant">MILLISECONDS_A_SECOND</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">MILLISECONDS_A_HOUR</span> <span class="token operator">=</span> <span class="token constant">SECONDS_A_HOUR</span> <span class="token operator">*</span> <span class="token constant">MILLISECONDS_A_SECOND</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">MILLISECONDS_A_DAY</span> <span class="token operator">=</span> <span class="token constant">SECONDS_A_DAY</span> <span class="token operator">*</span> <span class="token constant">MILLISECONDS_A_SECOND</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">MILLISECONDS_A_WEEK</span> <span class="token operator">=</span> <span class="token constant">SECONDS_A_WEEK</span> <span class="token operator">*</span> <span class="token constant">MILLISECONDS_A_SECOND</span><span class="token comment">// 单位名称</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">MS</span> <span class="token operator">=</span> <span class="token string">'millisecond'</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">S</span> <span class="token operator">=</span> <span class="token string">'second'</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">MIN</span> <span class="token operator">=</span> <span class="token string">'minute'</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">H</span> <span class="token operator">=</span> <span class="token string">'hour'</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">D</span> <span class="token operator">=</span> <span class="token string">'day'</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">W</span> <span class="token operator">=</span> <span class="token string">'week'</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">M</span> <span class="token operator">=</span> <span class="token string">'month'</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">Q</span> <span class="token operator">=</span> <span class="token string">'quarter'</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">Y</span> <span class="token operator">=</span> <span class="token string">'year'</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">DATE</span> <span class="token operator">=</span> <span class="token string">'date'</span><span class="token comment">// ISO 8601默认时间字符串：2021-05-18T13:56:28Z</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">FORMAT_DEFAULT</span> <span class="token operator">=</span> <span class="token string">'YYYY-MM-DDTHH:mm:ssZ'</span><span class="token comment">// 无效时间返回值，new Date('Invalid Date')的返回值</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">INVALID_DATE_STRING</span> <span class="token operator">=</span> <span class="token string">'Invalid Date'</span><span class="token comment">// 解析ISO 8601时间字符串，根据match捕获的索引可以获取年月日时分秒毫秒等信息</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">REGEX_PARSE</span> <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[^0-9]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?$</span><span class="token regex-delimiter">/</span></span><span class="token comment">// 解析时间格式字符串，通过String.replace将所有捕获的格式替换为实际值</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">REGEX_FORMAT</span> <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="国际化配置：locale"><a href="#国际化配置：locale" class="headerlink" title="国际化配置：locale"></a>国际化配置：locale</h3><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p><code>dayjs</code>会在打包的时候生成<code>locale.json</code>文件，存储语言包的<code>key</code>和<code>name</code>组成的数组。</p><p>注册使用语言包:</p><pre class="line-numbers language-none"><code class="language-none">import * as dayjs from 'dayjs';import 'dayjs/locale/zh-cn'; // 全局注册语言包dayjs.locale('zh-cn'); // 全局启用dayjs().locale('zh-cn').format(); // 当前实例启用<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="en-js"><a href="#en-js" class="headerlink" title="en.js"></a>en.js</h4><p>由于默认使用<code>en</code>作为<code>locale</code>，原生API也是使用<code>en</code>输出，因此<code>en.js</code>只配置了部分参数：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// English [en]</span><span class="token comment">// We don't need weekdaysShort, weekdaysMin, monthsShort in en.js locale</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token operator">:</span> <span class="token string">'en'</span><span class="token punctuation">,</span>  weekdays<span class="token operator">:</span> <span class="token string">'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'_'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  months<span class="token operator">:</span> <span class="token string">'January_February_March_April_May_June_July_August_September_October_November_December'</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'_'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="zh-cn-js"><a href="#zh-cn-js" class="headerlink" title="zh-cn.js"></a>zh-cn.js</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// Chinese (China) [zh-cn]</span><span class="token keyword">import</span> dayjs <span class="token keyword">from</span> <span class="token string">'dayjs'</span><span class="token keyword">const</span> locale <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment">// 语言名</span>  name<span class="token operator">:</span> <span class="token string">'zh-cn'</span><span class="token punctuation">,</span>  <span class="token comment">// 星期</span>  weekdays<span class="token operator">:</span> <span class="token string">'星期日_星期一_星期二_星期三_星期四_星期五_星期六'</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'_'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">// 短的星期</span>  weekdaysShort<span class="token operator">:</span> <span class="token string">'周日_周一_周二_周三_周四_周五_周六'</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'_'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">// 最短的星期</span>  weekdaysMin<span class="token operator">:</span> <span class="token string">'日_一_二_三_四_五_六'</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'_'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">// 月份</span>  months<span class="token operator">:</span> <span class="token string">'一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'_'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">// 短的月份</span>  monthsShort<span class="token operator">:</span> <span class="token string">'1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'_'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">// 序号生成工厂函数</span>  <span class="token function-variable function">ordinal</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">number<span class="token punctuation">,</span> period</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>period<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">case</span> <span class="token string">'W'</span><span class="token operator">:</span>        <span class="token comment">// W返回周序号</span>        <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>number<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">周</span><span class="token template-punctuation string">`</span></span>      <span class="token keyword">default</span><span class="token operator">:</span>        <span class="token comment">// 默认返回日序号</span>        <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>number<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">日</span><span class="token template-punctuation string">`</span></span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment">// 一周起始日，设置为1定义星期一是开始</span>  weekStart<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token comment">// 一年起始周，设置为4定义一月四号所在周是开始</span>  yearStart<span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token comment">// 时间日期格式</span>  formats<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token constant">LT</span><span class="token operator">:</span> <span class="token string">'HH:mm'</span><span class="token punctuation">,</span>    <span class="token constant">LTS</span><span class="token operator">:</span> <span class="token string">'HH:mm:ss'</span><span class="token punctuation">,</span>    <span class="token constant">L</span><span class="token operator">:</span> <span class="token string">'YYYY/MM/DD'</span><span class="token punctuation">,</span>    <span class="token constant">LL</span><span class="token operator">:</span> <span class="token string">'YYYY年M月D日'</span><span class="token punctuation">,</span>    <span class="token constant">LLL</span><span class="token operator">:</span> <span class="token string">'YYYY年M月D日Ah点mm分'</span><span class="token punctuation">,</span>    <span class="token constant">LLLL</span><span class="token operator">:</span> <span class="token string">'YYYY年M月D日ddddAh点mm分'</span><span class="token punctuation">,</span>    l<span class="token operator">:</span> <span class="token string">'YYYY/M/D'</span><span class="token punctuation">,</span>    ll<span class="token operator">:</span> <span class="token string">'YYYY年M月D日'</span><span class="token punctuation">,</span>    lll<span class="token operator">:</span> <span class="token string">'YYYY年M月D日 HH:mm'</span><span class="token punctuation">,</span>    llll<span class="token operator">:</span> <span class="token string">'YYYY年M月D日dddd HH:mm'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment">// 相对时间格式</span>  relativeTime<span class="token operator">:</span> <span class="token punctuation">{</span>    future<span class="token operator">:</span> <span class="token string">'%s内'</span><span class="token punctuation">,</span>    past<span class="token operator">:</span> <span class="token string">'%s前'</span><span class="token punctuation">,</span>    s<span class="token operator">:</span> <span class="token string">'几秒'</span><span class="token punctuation">,</span>    m<span class="token operator">:</span> <span class="token string">'1 分钟'</span><span class="token punctuation">,</span>    mm<span class="token operator">:</span> <span class="token string">'%d 分钟'</span><span class="token punctuation">,</span>    h<span class="token operator">:</span> <span class="token string">'1 小时'</span><span class="token punctuation">,</span>    hh<span class="token operator">:</span> <span class="token string">'%d 小时'</span><span class="token punctuation">,</span>    d<span class="token operator">:</span> <span class="token string">'1 天'</span><span class="token punctuation">,</span>    dd<span class="token operator">:</span> <span class="token string">'%d 天'</span><span class="token punctuation">,</span>    <span class="token constant">M</span><span class="token operator">:</span> <span class="token string">'1 个月'</span><span class="token punctuation">,</span>    <span class="token constant">MM</span><span class="token operator">:</span> <span class="token string">'%d 个月'</span><span class="token punctuation">,</span>    y<span class="token operator">:</span> <span class="token string">'1 年'</span><span class="token punctuation">,</span>    yy<span class="token operator">:</span> <span class="token string">'%d 年'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment">// 时间段</span>  <span class="token function-variable function">meridiem</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">hour<span class="token punctuation">,</span> minute</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> hm <span class="token operator">=</span> <span class="token punctuation">(</span>hour <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">+</span> minute    <span class="token keyword">if</span> <span class="token punctuation">(</span>hm <span class="token operator">&lt;</span> <span class="token number">600</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token string">'凌晨'</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>hm <span class="token operator">&lt;</span> <span class="token number">900</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token string">'早上'</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>hm <span class="token operator">&lt;</span> <span class="token number">1100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token string">'上午'</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>hm <span class="token operator">&lt;</span> <span class="token number">1300</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token string">'中午'</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>hm <span class="token operator">&lt;</span> <span class="token number">1800</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token string">'下午'</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token string">'晚上'</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 全局注册语言包</span>dayjs<span class="token punctuation">.</span><span class="token function">locale</span><span class="token punctuation">(</span>locale<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token comment">// 导出语言配置，用于启用</span><span class="token keyword">export</span> <span class="token keyword">default</span> locale<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="工具函数：utils-js"><a href="#工具函数：utils-js" class="headerlink" title="工具函数：utils.js"></a>工具函数：utils.js</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// ES Module引入常量，短名减少代码量</span><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> <span class="token constant">C</span> <span class="token keyword">from</span> <span class="token string">'./constant'</span><span class="token comment">/** * @description: 在 string 的开头填充 pad 字符，直到长度为 length，相当于`string.padStart(length, pad)`，空字符串也不做填充 * @param {String} string 被填充的字符串 * @param {Number} length 需要扩充到的长度 * @param {String} pad 填充字符 * @return {String} 填充后的字符串 */</span><span class="token keyword">const</span> <span class="token function-variable function">padStart</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">string<span class="token punctuation">,</span> length<span class="token punctuation">,</span> pad</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token comment">// 只做了string的类型兼容判断，length，pad都没有，有风险</span>  <span class="token comment">// 可参考：https://github.com/lodash/lodash/blob/4.17.15/lodash.js#L14443</span>  <span class="token comment">// 但也有一个想法：判断是否够用就行，不用做到极致，否则也是一种浪费？</span>  <span class="token keyword">const</span> s <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>s <span class="token operator">||</span> s<span class="token punctuation">.</span>length <span class="token operator">&gt;=</span> length<span class="token punctuation">)</span> <span class="token keyword">return</span> string  <span class="token comment">// Array((length + 1) - s.length).join(pad)</span>  <span class="token comment">// 可简化为pad.repeat(length - s.length)</span>  <span class="token comment">// dayjs打包直接就体现：从2.6KB转成了2.59KB</span>  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">Array</span><span class="token punctuation">(</span><span class="token punctuation">(</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> s<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>pad<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>string<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span><span class="token comment">/** * @description: 将实例的UTC偏移量（分钟）转化成的 [+|-]HH:mm的格式 * @param {Dayjs} instance Dayjs的实例 * @return {String} UTC偏移量，格式：[+|-]HH:mm */</span><span class="token keyword">const</span> <span class="token function-variable function">padZoneStr</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">instance</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token comment">// 这里逻辑取反，而后面判断&lt;=0为正，是否有必要呢？改为以下代码可读性感觉更好：</span>  <span class="token comment">// const minutes = instance.utcOffset()</span>  <span class="token comment">// const absMinutes = Math.abs(minutes)</span>  <span class="token comment">// const hourOffset = Math.floor(absMinutes / 60)</span>  <span class="token comment">// const minuteOffset = absMinutes % 60</span>  <span class="token comment">// return `${minutes &gt;= 0 ? '+' : '-'}${padStart(hourOffset, 2, '0')}:${padStart(minuteOffset, 2, '0')}`</span>  <span class="token keyword">const</span> negMinutes <span class="token operator">=</span> <span class="token operator">-</span>instance<span class="token punctuation">.</span><span class="token function">utcOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> minutes <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>negMinutes<span class="token punctuation">)</span>  <span class="token keyword">const</span> hourOffset <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>minutes <span class="token operator">/</span> <span class="token number">60</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> minuteOffset <span class="token operator">=</span> minutes <span class="token operator">%</span> <span class="token number">60</span>  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>negMinutes <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token string">'+'</span> <span class="token operator">:</span> <span class="token string">'-'</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">padStart</span><span class="token punctuation">(</span>hourOffset<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">padStart</span><span class="token punctuation">(</span>minuteOffset<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span><span class="token comment">/** * @description: 返回两个Dayjs实例的月份差 * @param {Dayjs} a Dayjs的实例 * @param {Dayjs} b Dayjs的实例 * @return {Number} 返回两个实例的月份差 */</span><span class="token keyword">const</span> <span class="token function-variable function">monthDiff</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token comment">// 来自moment.js的函数，确保两者返回相同的结果</span>  <span class="token comment">// 使用简单的反向逻辑递归调用，大大降低代码逻辑复杂度，减少代码量</span>  <span class="token comment">// 但是另外一方面转成了-(b-a)，不知道为什么要做这个反转，同上面的padZoneStr</span>  <span class="token comment">// 关于monthDiff算法的讨论：https://stackoverflow.com/questions/2536379/difference-in-months-between-two-dates-in-javascript</span>  <span class="token comment">// moment讨论结果：https://github.com/moment/moment/pull/571</span>  <span class="token comment">// 以下解析按照不反转逻辑来解析即a-b</span>  <span class="token comment">// 算法主要分为两部分，两部分相加即可</span>  <span class="token comment">// 1. 不考虑日期，计算相差的月份数，即：总月差 = 年差值 * 12 + 月差值</span>  <span class="token comment">// 2. 计算日期差值转成的小数，这部分逻辑就是算法差异，dayjs和momentjs的逻辑如下：</span>  <span class="token comment">// 2.1 获取锚点1 = b日期实例 + 总月差</span>  <span class="token comment">//  2.2 获取a日期与锚点1的差值 = a日期 - 锚点1</span>  <span class="token comment">//  2.3 判断a日期与锚点1的大小，即如果a日期小于锚点1，说明差距没这么大，需要减去多出来的部分，反之需要多加一部分</span>  <span class="token comment">//  2.4 根据2.3的判断生成锚点2 = b日期实例 + 总月差+/-1，如此a日期实例必然落在锚点1和锚点2之间</span>  <span class="token comment">//  2.5 获取锚点区间长度 = 锚点2 - 锚点1</span>  <span class="token comment">//  2.6 计算a日期占据比例 = 锚点区间占据长度（a日期与锚点1的差值） / 锚点区间长度</span>  <span class="token comment">// 3. 计算最终月差 = 第一步计算的总月差 + a日期占据比例</span>    <span class="token comment">// 正向逻辑写法：</span>  <span class="token comment">// if (a.date() &lt; b.date()) return -monthDiff(b, a)</span>  <span class="token comment">// const wholeMonthDiff = ((a.year() - b.year()) * 12) + (a.month() - b.month())</span>  <span class="token comment">// const anchor1 = b.clone().add(wholeMonthDiff, 'month')</span>  <span class="token comment">// const l1 = a - anchor1</span>  <span class="token comment">// const anchor2 = b.clone().add(wholeMonthDiff + (l1 &lt; 0 ? -1 : 1), 'month')</span>  <span class="token comment">// const l2 = Math.abs(anchor2 - anchor1);</span>  <span class="token comment">// return (wholeMonthDiff + l1 / l2) || 0</span>    <span class="token comment">// 原反向逻辑写法-(b - a)：</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">date</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> b<span class="token punctuation">.</span><span class="token function">date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token function">monthDiff</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> a<span class="token punctuation">)</span>  <span class="token keyword">const</span> wholeMonthDiff <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">year</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> a<span class="token punctuation">.</span><span class="token function">year</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">12</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">month</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> a<span class="token punctuation">.</span><span class="token function">month</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> anchor <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>wholeMonthDiff<span class="token punctuation">,</span> <span class="token constant">C</span><span class="token punctuation">.</span><span class="token constant">M</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> c <span class="token operator">=</span> b <span class="token operator">-</span> anchor <span class="token operator">&lt;</span> <span class="token number">0</span>  <span class="token keyword">const</span> anchor2 <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>wholeMonthDiff <span class="token operator">+</span> <span class="token punctuation">(</span>c <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">C</span><span class="token punctuation">.</span><span class="token constant">M</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token punctuation">(</span>wholeMonthDiff <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>b <span class="token operator">-</span> anchor<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>c <span class="token operator">?</span> <span class="token punctuation">(</span>anchor <span class="token operator">-</span> anchor2<span class="token punctuation">)</span> <span class="token operator">:</span>    <span class="token punctuation">(</span>anchor2 <span class="token operator">-</span> anchor<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">/** * @description: 向0取整 * @param {Number} n 要取整的数 * @return {Number} 返回取整后的数字 */</span><span class="token keyword">const</span> <span class="token function-variable function">absFloor</span> <span class="token operator">=</span> <span class="token parameter">n</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>  n <span class="token operator">&lt;</span> <span class="token number">0</span>  <span class="token comment">// || 0 是为了确保不会出现-0，Math.ceil(-0.1) =&gt; -0</span>  <span class="token operator">?</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token operator">:</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">/** * @description: 返回 u 对应的小写单数形式的单位，能自动适配标准格式和缩写格式 * @param {String} u M(month) y(year) w(week) d(day) D(date) h(hour) m(minute) s(second) ms(millisecond) Q(quarter) 或 其他字符串 * @return {String} u 对应的单位 */</span><span class="token keyword">const</span> <span class="token function-variable function">prettyUnit</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">u</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> special <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token constant">M</span><span class="token operator">:</span> <span class="token constant">C</span><span class="token punctuation">.</span><span class="token constant">M</span><span class="token punctuation">,</span>    y<span class="token operator">:</span> <span class="token constant">C</span><span class="token punctuation">.</span><span class="token constant">Y</span><span class="token punctuation">,</span>    w<span class="token operator">:</span> <span class="token constant">C</span><span class="token punctuation">.</span><span class="token constant">W</span><span class="token punctuation">,</span>    d<span class="token operator">:</span> <span class="token constant">C</span><span class="token punctuation">.</span><span class="token constant">D</span><span class="token punctuation">,</span>    <span class="token constant">D</span><span class="token operator">:</span> <span class="token constant">C</span><span class="token punctuation">.</span><span class="token constant">DATE</span><span class="token punctuation">,</span>    h<span class="token operator">:</span> <span class="token constant">C</span><span class="token punctuation">.</span><span class="token constant">H</span><span class="token punctuation">,</span>    m<span class="token operator">:</span> <span class="token constant">C</span><span class="token punctuation">.</span><span class="token constant">MIN</span><span class="token punctuation">,</span>    s<span class="token operator">:</span> <span class="token constant">C</span><span class="token punctuation">.</span><span class="token constant">S</span><span class="token punctuation">,</span>    ms<span class="token operator">:</span> <span class="token constant">C</span><span class="token punctuation">.</span><span class="token constant">MS</span><span class="token punctuation">,</span>    <span class="token constant">Q</span><span class="token operator">:</span> <span class="token constant">C</span><span class="token punctuation">.</span><span class="token constant">Q</span>  <span class="token punctuation">}</span>  <span class="token comment">// 返回special定义的单位，或将自定义的单位转为小写并去除结尾s字符的单数形式的单位</span>  <span class="token keyword">return</span> special<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token function">String</span><span class="token punctuation">(</span>u <span class="token operator">||</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">s$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">/** * @description: 判断是否为undefined * @param {Any} s * @return {Boolean} 返回是否为undefined：true/false */</span><span class="token keyword">const</span> <span class="token function-variable function">isUndefined</span> <span class="token operator">=</span> <span class="token parameter">s</span> <span class="token operator">=&gt;</span> s <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token comment">// index.js使用Utils空间，babel无法mangle</span><span class="token comment">// 缩短为了极致优化大小，实际开发不太推荐这样做</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  s<span class="token operator">:</span> padStart<span class="token punctuation">,</span>  z<span class="token operator">:</span> padZoneStr<span class="token punctuation">,</span>  m<span class="token operator">:</span> monthDiff<span class="token punctuation">,</span>  a<span class="token operator">:</span> absFloor<span class="token punctuation">,</span>  p<span class="token operator">:</span> prettyUnit<span class="token punctuation">,</span>  u<span class="token operator">:</span> isUndefined<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="入口文件：index-js"><a href="#入口文件：index-js" class="headerlink" title="入口文件：index.js"></a>入口文件：index.js</h3><p><code>index.js</code>是<code>dayjs</code>的核心，为了优化大小，作者在写代码的时候精简了部分参数，包括导入参数、工具函数等等。</p><p>为了方便阅读源码，我把有影响阅读的方法参数都重新补全。核心入口文件主要分为以下几部分：</p><ul><li>引入常量、语言配置、工具函数模块</li><li>初始化配置语言环境为en，定义全局环境变量</li><li>定义使用全局变量的工具方法，并统一放到Utils命名空间</li><li>核心Dayjs类</li><li>工厂函数对象dayjs</li><li>为工厂函数对象添加原型方法和静态方法，挂载环境变量</li><li>返回工厂函数dayjs</li></ul><pre class="line-numbers language-none"><code class="language-none">// 引入常量、语言配置、工具函数模块import * as CONSTANT from './constant'import en from './locale/en'import UTILS from './utils'// 初始化配置语言环境为en，定义全局环境变量// 存储当前语言环境let LOCALE = 'en' // global locale// 存储已导入的语言包配置const LoadedLocales = {} // global loaded locale// 将en语言包配置添加到环境变量对象进行存储LoadedLocales[LOCALE] = en/** * @description: 判断是否为Dayjs实例 * @param {Any} d * @return {Boolean} 返回是否为Dayjs实例：true/false */const isDayjs = d =&gt; d instanceof Dayjs/** * @description 解析语言配置，导入并启用语言包 * @param {String|Object} preset 语言包名称或语言包配置对象 * @param {Object} object 语言包配置对象或null * @param {Boolean} isLocal 是否为本地语言 * @return {String} 返回解析到的环境语言名称 */const parseLocale = (preset, object, isLocal) =&gt; {  let locale  // 不传参数则直接返回当前启用的语言包名  if (!preset) return LOCALE  if (typeof preset === 'string') {    // 判断是否preset语言是否已导入到本地    if (LoadedLocales[preset]) {      // 已导入则保存解析语言为preset      locale = preset    }    // 判断传入语言配置对象    if (object) {      // 传入则直接导入语言配置并保存语言名称为preset      LoadedLocales[preset] = object      locale = preset    }  } else {    // 若preset是完整的语言配置对象，则获取语言名称，存储导入并保存解析语言名称    const { name } = preset    LoadedLocales[name] = preset    locale = name  }  // 未传入isLocal或isLocal为false时，将启用语言包为环境语言  if (!isLocal &amp;&amp; locale) LOCALE = locale  // 返回解析到的环境语言名称，未成功解析则返回当前环境语言  return locale || (!isLocal &amp;&amp; LOCALE)}/** * @description 工厂函数对象dayjs * @param {Any} date Dayjs对象实例或Date对象实例或可以转换为Date的字符串、时间戳等 * @param {Object} c 配置对象 * @return {Dayjs} 返回Dayjs实例对象 */const dayjs = function (date, c) {  // 若传入Dayjs实例对象，则直接返回对象的拷贝  if (isDayjs(date)) {    return date.clone()  }  // 获取初始化构建参数，生成Dayjs实例对象  const config = typeof c === 'object' ? c : {}  config.date = date  config.args = arguments  return new Dayjs(config)}/** * @description 获取dayjs实例的环境配置结合Date实例对象生成新的Dayjs实例 * @param {Date} date 日期实例对象 * @param {Dayjs} instance Dayjs实例对象 * @return {Dayjs} 返回新的Dayjs实例 */const wrapper = (date, instance) =&gt;  dayjs(date, {    // 语言环境配置    locale: instance.$LOCALE,    // UTC配置    utc: instance.$utc,    // 时区配置    timezone: instance.$timezone,    // 偏移配置，未启用，忽略    $offset: instance.$offset // todo: refactor; do not use this.$offset in you code  })// 定义使用全局变量的工具方法，并统一放到Utils命名空间const Utils = UTILS // for plugin useUtils.parseLocale = parseLocaleUtils.isDayjs = isDayjsUtils.wrapper = wrapper/** * @description 通过参数生成Date实例对象 * @param {Object} config 时间参数，包含date：时间参数,utc：Boolean,是否启用UTC * @return {Date} 返回Date实例对象 */const parseDate = (config) =&gt; {  const { date, utc } = config  // date不能传入null，将返回Invalid Date  if (date === null) return new Date(NaN) // null is invalid  // 未传入date时，则使用当前时间  if (Utils.isUndefined(date)) return new Date() // today  // 确保数据不可变性，传入为Date实例时，重新通过new Date生成一个新的实例  if (date instanceof Date) return new Date(date)  // date是字符串且未使用z字符结尾  if (typeof date === 'string' &amp;&amp; !/Z$/i.test(date)) {    // 使用正则捕获日期对应的每个值，如2021-05-19 17:16:15.123，d可得到：    // [    //   '2021-05-19 17:16:15.123', // 原始值,d[0]    //   '2021', // 年,d[1]    //   '05', // 月,d[2]    //   '19', // 日,d[3]    //   '17', // 时,d[4]    //   '16', // 分,d[5]    //   '15', // 秒,d[6]    //   '123', // 毫秒,d[7]    //   index: 0,    //   input: '2021-05-19 17:16:15.123',    //   groups: undefined    // ]    const d = date.match(CONSTANT.REGEX_PARSE)    if (d) {      // 需关注new Date时传入的月份应为monthIndex即月份的索引=月份值-1      // 月份可不传，则匹配值为undefined,undefined - 1返回NaN，需要转为1月份即月份索引值为0      const m = d[2] - 1 || 0      // 毫秒可能未传入则匹配值为undefined，或者传入过长，因此取三位      const ms = (d[7] || '0').substring(0, 3)      // 由于至少匹配到年，因此除了年份值之外都需要做兼容处理：      // 即往1月1日0时0分0秒0毫秒做兼容      // 使用兼容性最强的初始化Date对象方式，即传入所有参数或传入时间戳，而不是使用字符串      // utc用于判断是否是UTC时间      if (utc) {        // Date.UTC返回UTC模式的时间戳        return new Date(Date.UTC(d[1], m, d[3]          || 1, d[4] || 0, d[5] || 0, d[6] || 0, ms))      }      return new Date(d[1], m, d[3]          || 1, d[4] || 0, d[5] || 0, d[6] || 0, ms)    }  }  // 这里覆盖其他类型，Dayjs本身会使用timestamp的类型，在add()方法里面使用  // 其他类型的字符串将尝试使用Date解析，无法确保能解析成功：  // https://star.qingzz.cn/2021/05/14/shi-jian/#toc-heading-16  return new Date(date) // everything else}// 核心Dayjs类class Dayjs {  /**   * @description 构造函数   * @param {Object} config locale,date,utc,timezone等参数   */  constructor(config) {    // 初始化语言环境    this.$LOCALE = parseLocale(config.locale, null, true)    // 初始化时间参数    this.parse(config) // for plugin  }  /**   * @description 初始化时间相关参数   * @param {Object} config 构造函数的参数对象   */  parse(config) {    // 初始化时间对象，使用原生Date对象大大降低代码量和复杂度    this.$date = parseDate(config)    // 初始化时区配置    this.$timezone = config.timezone || {}    // 初始化计算各项时间参数    this.init()  }  /**   * @description 初始化年、月、日、星期、时、分、秒、毫秒属性   */  init() {    const { $date } = this    this.$year = $date.getFullYear()    this.$Month = $date.getMonth()    this.$Date = $date.getDate()    this.$WeekDay = $date.getDay()    this.$Hour = $date.getHours()    this.$minute = $date.getMinutes()    this.$second = $date.getSeconds()    this.$millisecond = $date.getMilliseconds()  }  /**   * @description 将工具函数通过方法懒挂载到实例上，而不是直接赋值到某个属性，简化实例对象，更轻量且能复用同一份方法，值得学习   */  $utils() {    return Utils  }  /**   * @description 判断是否合法时间   * @return {Boolean} 返回是否时间是否合法，true/false   */  isValid() {    // Date非法时，转为字符串为Invalid Date，可根据此进行判断    // 可以直接用!==，不但减少了一次转换，而且实际上!==的性能比===性能好    // 大家可以使用下面代码测试一下：    // // ===    // console.time();    // console.log("1 === 1", 1 === 1); // 1 === 1 true    // console.timeEnd(); // default: 5.81ms    // console.time();    // console.log("1 === '1'", 1 === '1'); // 1 === '1' false    // console.timeEnd(); // default: 0.109ms    // // !==    // console.time();    // console.log("1 !== 1", 1 !== 1); // 1 !== 1 false    // console.timeEnd(); // default: 0.039ms    // console.time();    // console.log("1 !== '1'", 1 !== '1'); // 1 !== '1' true    // console.timeEnd(); // default: 0.063ms        // 应改为：return CONSTANT.INVALID_DATE_STRING !== this.$date.toString()    return !(this.$date.toString() === CONSTANT.INVALID_DATE_STRING)  }  /**   * @description 判断当前实例是否与另外一个实例在某个单位层级内相等   * @param {Dayjs} that Dayjs比较实例   * @param {String} units 单位层级字符串   * @return {Boolean} 返回是否相等，true/false   */  isSame(that, units) {    const other = dayjs(that)    // 使用夹逼定理，可确定other落在units层级区间里，即在上一层级必然相等    // 若不传units，则startOf和endOf都是返回拷贝，直接根据相等判断即可    return this.startOf(units) &lt;= other &amp;&amp; other &lt;= this.endOf(units)  }  /**   * @description 判断当前实例时间是否在另外一个实例的时间之后   * @param {Dayjs} that Dayjs比较实例   * @param {String} units 单位层级字符串   * @return {Boolean} 返回是否在that之后，true/false   */  isAfter(that, units) {    return dayjs(that) &lt; this.startOf(units)  }  /**   * @description 判断当前实例时间是否在另外一个实例的时间之前   * @param {Dayjs} that Dayjs比较实例   * @param {String} units 单位层级字符串   * @return {Boolean} 返回是否在that之前，true/false   */  isBefore(that, units) {    return this.endOf(units) &lt; dayjs(that)  }  /**   * @description 私有方法，用于分发获取或设置各项时间参数   * @param {Number} input 设置值   * @param {String} get 获取参数键值   * @param {String} set 设置参数键值   * @return {Dayjs|Number} 获取则返回获取值，设置则返回this实例用于链式调用   */  $getterSetter(input, get, set) {    // 可跳转到下面调用的地方一起看    // 不传input,则是获取方法，直接获取属性值，在init()方法初始化和更新    if (Utils.isUndefined(input)) return this[get]    // 传入input，则是设置方法    return this.set(set, input)  }  /**   * @description 返回秒级别的时间戳   * @return {Number} 秒级时间戳   */  unix() {    return Math.floor(this.valueOf() / 1000)  }  /**   * @description 返回时间值   * @return {Number} 非法时间将返回NaN，合法时间则返回时间戳   */  valueOf() {    // timezone(hour) * 60 * 60 * 1000 =&gt; ms    return this.$date.getTime()  }  /**   * @description 根据单位将实例设置到一个时间段的开始   * @param {String} units 单位字符串   * @param {Boolean} startOf 可选，true或不传使用开始值，false使用结束值   * @return {Dayjs} 返回某个时间段起始或结束的实例   */  startOf(units, startOf) { // startOf -&gt; endOf    // 不传或true则计算startOf，否则为endOf    const isStartOf = !Utils.isUndefined(startOf) ? startOf : true    // 通过prettyUnit扩展单位支持范围，接受普通值、缩写、复数，对大小写不敏感    const unit = Utils.prettyUnit(units)    /**     * @description 根据月日（参数）和年份（实例）创建新的Dayjs实例     * @param {Number} d 日值     * @param {Number} m 月值，为索引     * @return {Dayjs} 返回新实例，环境参数使用原实例配置     */    // 为什么要日，月呢？可读性不好，下面instanceFactorySet又从大到小，一致性不好。修改调整：    // const instanceFactory = (d, m) =&gt; {    const instanceFactory = (m, d) =&gt; {      const ins = Utils.wrapper(this.$utc ?        Date.UTC(this.$year, m, d) : new Date(this.$year, m, d), this)      // 如果 isStartOf 为 false，返回ins当天的 endOf      return isStartOf ? ins : ins.endOf(CONSTANT.D)    }    /**     * @description 根据传入的方法来返回新的Dayjs实例     * @param {String} method 设置方法，如setHours,setMinutes等     * @param {Number} slice 截取参数     * @return {Dayjs} 返回新实例     */    const instanceFactorySet = (method, slice) =&gt; {      // [时,分,秒,毫秒]起始区间      const argumentStart = [0, 0, 0, 0]      const argumentEnd = [23, 59, 59, 999]      // 这里使用apply主要是想利用它接收数组参数的效果，也可以使用扩展运算符实现：      // return Utils.wrapper(this.toDate()[method](      //   ...(isStartOf ? argumentStart : argumentEnd).slice(slice)      // ), this)      return Utils.wrapper(this.toDate()[method].apply(        // 这里多了无用参数's'，应该是个bug        // this.toDate('s'),        this.toDate(),        (isStartOf ? argumentStart : argumentEnd).slice(slice)      ), this)    }    // 以下代码调整了instanceFactory参数的顺序：    // 获取星期，月，日值    const { $WeekDay, $Month, $Date } = this    // 原生设置方法UTC需要多加UTC字符    const utcPad = `set${this.$utc ? 'UTC' : ''}`    switch (unit) {      // 年：起始值为1-1 0:0:0，结束值为12-31 23:59:59.999（当天的endOf）      case CONSTANT.Y:        return isStartOf ? instanceFactory(0, 1) :          instanceFactory(11, 31)      // 月：起始值为月-1 0:0:0，结束值为下一月-0 23:59:59.999      // 骚操作：设置为下一个月，且日期为0，相当于上一个月的最后一天，这样完全不需要判断上个月是28、29、30、31天      case CONSTANT.M:        return isStartOf ? instanceFactory($Month, 1) :          instanceFactory($Month + 1, 0)      // 周：起始值为周日或周一的 0:0:0，结束值为周一或周日的 23:23:59.999      case CONSTANT.W: {        const weekStart = this.$locale().weekStart || 0        const gap = ($WeekDay &lt; weekStart ? $WeekDay + 7 : $WeekDay) - weekStart        return instanceFactory($Month, isStartOf ? $Date - gap : $Date + (6 - gap))      }      // 日：起始值为0:0:0.0，结束值为23:59:59.999      case CONSTANT.D:      case CONSTANT.DATE:        return instanceFactorySet(`${utcPad}Hours`, 0)      // 时：起始值为0:0:0.0，结束值为23:59:59.999      case CONSTANT.H:        return instanceFactorySet(`${utcPad}Minutes`, 1)      // 分：起始值为0:0.0，结束值为59:59.999      case CONSTANT.MIN:        return instanceFactorySet(`${utcPad}Seconds`, 2)      // 秒：起始值为0.0，结束值为59.999      case CONSTANT.S:        return instanceFactorySet(`${utcPad}Milliseconds`, 3)      // 默认返回一个拷贝      default:        return this.clone()    }    // // 获取星期，月，日值    // const { $WeekDay, $Month, $Date } = this    // // 原生设置方法UTC需要多加UTC字符    // const utcPad = `set${this.$utc ? 'UTC' : ''}`    // switch (unit) {    //   case CONSTANT.Y:    //     return isStartOf ? instanceFactory(1, 0) :    //       instanceFactory(31, 11)    //   case CONSTANT.M:    //     return isStartOf ? instanceFactory(1, $Month) :    //       instanceFactory(0, $Month + 1)    //   case CONSTANT.W: {    //     const weekStart = this.$locale().weekStart || 0    //     const gap = ($WeekDay &lt; weekStart ? $WeekDay + 7 : $WeekDay) - weekStart    //     return instanceFactory(isStartOf ? $Date - gap : $Date + (6 - gap), $Month)    //   }    //   case CONSTANT.D:    //   case CONSTANT.DATE:    //     return instanceFactorySet(`${utcPad}Hours`, 0)    //   case CONSTANT.H:    //     return instanceFactorySet(`${utcPad}Minutes`, 1)    //   case CONSTANT.MIN:    //     return instanceFactorySet(`${utcPad}Seconds`, 2)    //   case CONSTANT.S:    //     return instanceFactorySet(`${utcPad}Milliseconds`, 3)    //   default:    //     return this.clone()    // }  }  /**   * @description 获取某个单位层级范围空间的结束值   * @param {String} arg 单位字符串   * @return {Dayjs} 返回某个单位层级范围空间的结束值实例   */  endOf(arg) {    return this.startOf(arg, false)  }  /**   * @description 私有方法，设置某个单位层级的值   * @param {String} units 单位   * @param {Number} int 设置值   * @return {Dayjs} 返回this，方便链式调用   */  $set(units, int) { // private set    const unit = Utils.prettyUnit(units)    const utcPad = `set${this.$utc ? 'UTC' : ''}`    const name = {      [CONSTANT.D]: `${utcPad}Date`,      [CONSTANT.DATE]: `${utcPad}Date`,      [CONSTANT.M]: `${utcPad}Month`,      [CONSTANT.Y]: `${utcPad}FullYear`,      [CONSTANT.H]: `${utcPad}Hours`,      [CONSTANT.MIN]: `${utcPad}Minutes`,      [CONSTANT.S]: `${utcPad}Seconds`,      [CONSTANT.MS]: `${utcPad}Milliseconds`    }[unit]    // 由于使用setDate设置星期几，因此只需要将设置值减去当前值，即可知道需要在本周调整几天    // 然后和this.$Date即日期相加进行调整就可以了    // 其他参数都有自己原生的设置方法，直接调用即可    const arg = unit === CONSTANT.D ? this.$Date + (int - this.$WeekDay) : int    // 如果是年/月    // 重新设置年和月可能影响月份天数，例如当前是5月31日，月份改成4月，只能改成30日    // 或者当前是2000年2月29日，年份改成2001年，2月只有28天，只能改成28日    if (unit === CONSTANT.M || unit === CONSTANT.Y) {      // clone is for badMutable plugin      // 首页拷贝一份并设置日期为1号      const date = this.clone().set(CONSTANT.DATE, 1)      // 设置年或月      date.$date[name](arg)      // 重新初始化拷贝实例对象      date.init()      // 获取当月最长天数，如果当前实例日期超过则使用当月最长天数，否则为安全日期，直接使用即可      this.$date = date.set(CONSTANT.DATE, Math.min(this.$Date, date.daysInMonth())).$date    } else if (name) {      // 其他方法直接调用Date本身的方法进行设置即可      this.$date[name](arg)    }    // 更新各项参数值    this.init()    // 返回this，用于链式调用    return this  }  /**   * @description 设置值   * @param {String} string 设置键值   * @param {Number} int 值   * @return {Dayjs} 返回对象，用于链式调用   */  set(string, int) {    return this.clone().$set(string, int)  }  /**   * @description 获取某个单位级别的值   * @param {String} unit 单位   * @return {Number} 通过下面getterSetter分发挂载的原型方法获取某个单位级别的值   */  get(unit) {    return this[Utils.prettyUnit(unit)]()  }  /**   * @description 获取当前日期增加一段时间后的实例对象   * @param {Number} number 增加的数量   * @param {String} units 增加的单位   * @return {Dayjs} 返回增加一段时间后的实例   */  add(number, units) {    // 确保为数字    number = Number(number)    // 获取统一单位    const unit = Utils.prettyUnit(units)        /**     * @description 工厂函数，计算天数相关的增加，使用四舍五入     * @param {Number} n 1或7对应天和周     * @return {Dayjs} 返回增加时间后的实例     */    const instanceFactorySet = (n) =&gt; {      // 是否使用this.clone更语意化呢？      // const d = this.clone()      const d = dayjs(this)      return Utils.wrapper(d.date(d.date() + Math.round(n * number)), this)    }    // 代码顺序可调整：年月日周时分秒毫秒更整齐    // 月    if (unit === CONSTANT.M) {      return this.set(CONSTANT.M, this.$Month + number)    }    // 年    if (unit === CONSTANT.Y) {      return this.set(CONSTANT.Y, this.$year + number)    }    // // 月    // if (unit === CONSTANT.M) {    //   return this.set(CONSTANT.M, this.$Month + number)    // }    // 日    if (unit === CONSTANT.D) {      return instanceFactorySet(1)    }    // 周    if (unit === CONSTANT.W) {      return instanceFactorySet(7)    }    const step = {      [CONSTANT.MIN]: CONSTANT.MILLISECONDS_A_MINUTE,      [CONSTANT.H]: CONSTANT.MILLISECONDS_A_HOUR,      // [CONSTANT.MIN]: CONSTANT.MILLISECONDS_A_MINUTE,      [CONSTANT.S]: CONSTANT.MILLISECONDS_A_SECOND    }[unit] || 1 // ms    // 通过时间戳生成最终实例    const nextTimeStamp = this.$date.getTime() + (number * step)    return Utils.wrapper(nextTimeStamp, this)  }  /**   * @description 获取当前日期减少一段时间后的实例对象   * @param {Number} number 减少的数量   * @param {String} string 减少的单位   * @return {Dayjs} 返回减少一段时间后的实例   */  subtract(number, string) {    return this.add(number * -1, string)  }  /**   * @description 获取格式化的时间字符串   * @param {String} formatStr 时间字符串格式   * @return {String} 返回格式化的时间字符串   */  format(formatStr) {    // 非法时间直接返回Invalid Date    if (!this.isValid()) return CONSTANT.INVALID_DATE_STRING    // 不传格式则使用默认IOS 8601格式:'YYYY-MM-DDTHH:mm:ssZ'    const str = formatStr || CONSTANT.FORMAT_DEFAULT    // 时区偏移部分字符串    const zoneStr = Utils.padZoneStr(this)    // 获取当前语言配置    const locale = this.$locale()    // 获取时分月值    const { $Hour, $minute, $Month } = this    // 获取语言包里面的星期、月份、时间范围配置    const {      weekdays, months, meridiem    } = locale    /**     * @description: 返回对应缩写的字符串，可自适应     * @param {Array|Function} arr 星期和月份的缩写数组，也可以是函数     * @param {Number} index 索引     * @param {Array} full 星期和月份的非缩写数组     * @param {Number} length 返回结果的字符长度     * @return {String} 对应缩写的字符串     */    const getShort = (arr, index, full, length) =&gt; (      (        arr &amp;&amp; (arr[index] || arr(this, str)) // 通过缩写数组和索引获取      ) || full[index].substr(0, length) // 截取完整字符串的前面几个字符作为缩写，如Monday截取前3个字符：Mon    )    /**     * @description 获取12小时制的小时数     * @param {Number} num 格式长度     * @return {String} 返回使用0补足num长度的小时数     */    const get$Hour = num =&gt; (      // 这里关注|| 12，一般使用取余操作将小于除数，即0-11，使用 || 12，之后，0点和12点都会返回12      Utils.padStart($Hour % 12 || 12, num, '0')    )    /**     * @description 定义时间返回字符串的函数，默认取语言包定义的，否则使用默认en环境的     * @param {Number} hour 时     * @param {Number} minute 分     * @param {Boolean} isLowercase 是否要转为小写     * @return {String} 返回语言包定义的时间范围，默认返回AM/PM，传入小写则返回am/pm     */    const meridiemFunc = meridiem || ((hour, minute, isLowercase) =&gt; {      const m = (hour &lt; 12 ? 'AM' : 'PM')      return isLowercase ? m.toLowerCase() : m    })    /**     * 定义格式对应的值     */    const matches = {      YY: String(this.$year).slice(-2),      YYYY: this.$year,      M: $Month + 1,      MM: Utils.padStart($Month + 1, 2, '0'),      MMM: getShort(locale.monthsShort, $Month, months, 3),      MMMM: getShort(months, $Month),      D: this.$Date,      DD: Utils.padStart(this.$Date, 2, '0'),      d: String(this.$WeekDay),      dd: getShort(locale.weekdaysMin, this.$WeekDay, weekdays, 2),      ddd: getShort(locale.weekdaysShort, this.$WeekDay, weekdays, 3),      dddd: weekdays[this.$WeekDay],      H: String($Hour),      HH: Utils.padStart($Hour, 2, '0'),      h: get$Hour(1),      hh: get$Hour(2),      a: meridiemFunc($Hour, $minute, true),      A: meridiemFunc($Hour, $minute, false),      m: String($minute),      mm: Utils.padStart($minute, 2, '0'),      s: String(this.$second),      ss: Utils.padStart(this.$second, 2, '0'),      SSS: Utils.padStart(this.$millisecond, 3, '0'),      Z: zoneStr // 'ZZ' logic below    }    // 解析时间格式字符串，通过String.replace将所有捕获的格式替换为实际值    // const REGEX_FORMAT = /\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g    // https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/replace#%E6%8C%87%E5%AE%9A%E4%B8%80%E4%B8%AA%E5%87%BD%E6%95%B0%E4%BD%9C%E4%B8%BA%E5%8F%82%E6%95%B0    return str.replace(CONSTANT.REGEX_FORMAT, (match, $1) =&gt; $1 || matches[match] || zoneStr.replace(':', '')) // 'ZZ'  }  /**   * @description 获取分钟级的UTC偏移量，精度为15分钟   * @return {Number} 返回UTC偏移量   */  utcOffset() {    // Because a bug at FF24, we're rounding the timezone offset around 15 minutes    // https://github.com/moment/moment/pull/1871    return -Math.round(this.$date.getTimezoneOffset() / 15) * 15  }  /**   * @description 获取当前实例与另外一个日期之间的差异   * @param {Any} input Dayjs实例、或可以转换为Date的参数，如Date实例、时间戳、ISO 8601字符串等   * @param {String} units 单位   * @param {Boolean} float 是否保留小数   * @return {Number} 返回差别的单位数   */  diff(input, units, float) {    // 单位    const unit = Utils.prettyUnit(units)    // 使用input定义实例    const that = dayjs(input)    // 获取UTC差别的分钟数转为毫秒数，解决DST造成的时差问题，由于DST某些天不会是完整的24小时    // https://github.com/moment/moment/issues/831    // https://github.com/moment/moment/issues/2361    const zoneDelta = (that.utcOffset() - this.utcOffset()) * CONSTANT.MILLISECONDS_A_MINUTE    // 获取直接相减的毫秒数    const diff = this - that    // 获取差别的月份数    let result = Utils.monthDiff(this, that)    // 这里可能会做一些无谓计算，但是如果使用判断未必能更快    // 这样的写法更简洁    result = {      // 年      [CONSTANT.Y]: result / 12,      // 月      [CONSTANT.M]: result,      // 季      [CONSTANT.Q]: result / 3,      // 周      [CONSTANT.W]: (diff - zoneDelta) / CONSTANT.MILLISECONDS_A_WEEK,      // 日      [CONSTANT.D]: (diff - zoneDelta) / CONSTANT.MILLISECONDS_A_DAY,      // 时      [CONSTANT.H]: diff / CONSTANT.MILLISECONDS_A_HOUR,      // 分      [CONSTANT.MIN]: diff / CONSTANT.MILLISECONDS_A_MINUTE,      // 秒      [CONSTANT.S]: diff / CONSTANT.MILLISECONDS_A_SECOND    }[unit] || diff // milliseconds    // 返回保留小数或取整的结果    return float ? result : Utils.absFloor(result)  }  /**   * @description 获取月份包含天数   * @return {Number} 返回月底日期   */  daysInMonth() {    return this.endOf(CONSTANT.M).$Date  }  /**   * @description 私有方法，用于获取当前语言环境配置对象   * @return {Object} 返回当前语言环境配置对象   */  $locale() { // get locale object    return LoadedLocales[this.$LOCALE]  }  /**   * @description 获取语言环境或启用语言包   * @param {Any} preset 语言环境字符串或语言配置对象   * @param {Object} object 一般本地语言包会传入null来启用，也可以通过object直接将语言配置传入   * @return {String|Dayjs} 不传参数则返回语言环境，传入参数则启用语言包并返回新Dayjs拷贝   */  locale(preset, object) {    if (!preset) return this.$LOCALE    // 保持不可变性，重新生成拷贝进行环境配置    const that = this.clone()    const nextLocaleName = parseLocale(preset, object, true)    if (nextLocaleName) that.$LOCALE = nextLocaleName    return that  }  /**   * @description 生成拷贝   * @return {Dayjs} 复制当前环境参数和Date对象生成一个新的实例   */  clone() {    return Utils.wrapper(this.$date, this)  }  /**   * @description 转化为Date对象   * @return {Date} 返回Date对象   */  toDate() {    // 体现不可变性，不返回this.$date，而是重新生成Date对象    return new Date(this.valueOf())  }  /**   * @description 返回JSON格式字符串   * @return {String|Null} 非法返回null,合法返回类似"2021-05-19T09:47:35.970Z"格式的字符串   */  toJSON() {    return this.isValid() ? this.toISOString() : null  }  /**   * @description 转为ISO 8601格式字符串   * @return {String} 非法报错，合法返回类似"2021-05-19T09:47:35.970Z"格式的字符串   */  toISOString() {    // ie 8 return    // new Dayjs(this.valueOf() + this.$date.getTimezoneOffset() * 60000)    // .format('YYYY-MM-DDTHH:mm:ss.SSS[Z]')    return this.$date.toISOString()  }  /**   * @description 转为字符串   * @return {String} 非法返回Invalid Date，合法返回类似"Wed, 19 May 2021 09:45:51 GMT"格式的字符串   */  toString() {    return this.$date.toUTCString()  }}// 为工厂函数对象添加原型方法和静态方法，挂载环境变量const proto = Dayjs.prototypedayjs.prototype = proto;[  ['$millisecond', CONSTANT.MS],  ['$second', CONSTANT.S],  ['$minute', CONSTANT.MIN],  ['$Hour', CONSTANT.H],  ['$WeekDay', CONSTANT.D],  ['$Month', CONSTANT.M],  ['$year', CONSTANT.Y],  ['$Date', CONSTANT.DATE]].forEach((g) =&gt; {  // 使用分发快速挂载一种类型的方法，值得学习  // 注册原型方法：year,month,date,week,hour,minute,second,millisecond  // input不传则是获取，否则是设置，这种getter和setter的区别非常常见，可关注  proto[g[1]] = function (input) {    return this.$getterSetter(input, g[0], g[1])  }})/** * @description 导入并启用插件 * @param {Object} plugin 插件对象 * @param {Object} option 插件配置 * @return {dayjs} 返回已安装插件的dayjs对象，用于链式调用 */dayjs.extend = (plugin, option) =&gt; {  // 防止多次注册  if (!plugin.$install) { // install plugin only once    // 调用函数全局注册插件    plugin(option, Dayjs, dayjs)    // 添加安装标记    plugin.$install = true  }  return dayjs}// 解析语言配置，导入并启用语言包dayjs.locale = parseLocale// 判断是否是Dayjs实例对象dayjs.isDayjs = isDayjs// 通过秒级的时间戳生成dayjs实例dayjs.unix = timestamp =&gt; (  dayjs(timestamp * 1e3))// 定义默认语言en的环境dayjs.en = LoadedLocales[LOCALE]// 注册语言包dayjs.LoadedLocales = LoadedLocales// 定义插件对象dayjs.plugins = {}// 返回工厂函数dayjsexport default dayjs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 源码解析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>时间</title>
      <link href="2021/05/14/shi-jian/"/>
      <url>2021/05/14/shi-jian/</url>
      
        <content type="html"><![CDATA[<p>本文主要是想总结时间相关的知识，包括基础概念、原生API、流行的时间处理库。</p><h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><h3 id="GMT：格林威治时间"><a href="#GMT：格林威治时间" class="headerlink" title="GMT：格林威治时间"></a>GMT：格林威治时间</h3><p>GMT（Greenwich Mean Time），一般称为格林威治时间或格林尼治时间，也叫世界时（Universal Time）或世界标准时间。是指位于<strong>英国伦敦</strong>郊区的<strong>皇家格林尼治天文台</strong>的标准时间，是<strong>本初子午线</strong>上的地方时，是<strong>0时区</strong>的区时。</p><h4 id="时区"><a href="#时区" class="headerlink" title="时区"></a>时区</h4><p>地球自西向东转，处于东边的地方比西边的地方早见到太阳，因此东边比西边时间早。以本初子午线为中心，按照地球自转方向，每隔经度15°划分一个时区的方法，全球共分为24个时区：东1区至东12区，西1区至西12区，其中东西12区跨度都是7.5°也叫半时区。每个时区之间时间相隔1个小时，因此当前时间和GMT时间的相差计算公式为：</p><pre class="line-numbers language-none"><code class="language-none">本时区时间 = GMT时间 + 时区差（东N时区+N，西N时区-N）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="中国时区"><a href="#中国时区" class="headerlink" title="中国时区"></a>中国时区</h4><p>中国境内一般统一使用东八区区时，即我们常听到的北京时间。实际上中国在地理上覆盖了东五区到东九区，因此境内有四个小时的时差，可能东部已经深夜，西部才刚傍晚。虽然如此，为了方便沟通，中国统一使用首都北京所在的东八区所在的区时作为统一时间。</p><h4 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h4><p>HTTP传输日期和时间戳信息使用GMT作为标准，浏览器会自动转化。现行HTTP1.1的时间格式为：</p><pre class="line-numbers language-none"><code class="language-none">date: Mon, 17 May 2021 03:07:34 GMT<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对于HTTP来说，GMT和UTC是等价的。</p><h3 id="UTC：世界标准时间"><a href="#UTC：世界标准时间" class="headerlink" title="UTC：世界标准时间"></a>UTC：世界标准时间</h3><p>UTC（Coordinated Universal Time），一般称为世界标准时间，或协调世界时、国际协调时间、世界统一时间，由于英文（CUT）和法文（TUC）缩写不同，作为妥协，简称UTC。UTC以<strong>原子时</strong>作为计量时间的单位，计算结果极为精密，误差值必须保持在0.9秒以内，大于0.9秒将通过<strong>闰秒</strong>来解决。</p><h4 id="原子时"><a href="#原子时" class="headerlink" title="原子时"></a>原子时</h4><p>IAT（international atomic time），称为原子时，是以物质的原子内部发射的电磁振荡频率为基准的时间计量系统。美国的物理实验市在2014年造出了人类历史上最精确的原子钟，<strong>50亿年误差1s</strong>。中国的铯原子钟也能确保2000万年误差不超过1s。</p><h4 id="与GMT的区别"><a href="#与GMT的区别" class="headerlink" title="与GMT的区别"></a>与GMT的区别</h4><p>GMT根据地球自转和公转来计算时间，而地球本身是椭圆，公转的轨道也是椭圆的，造成每天、每年的长短都不一样，误差就容易造成不精准，因此需要一个稳定精准的标准。</p><p>在UTC标准里面，一天恒定24小时，即86400秒。因此在UTC出现后，GMT称为格林威治时间而不是世界标准时间更合适，UTC才是新的世界标准时间。</p><h4 id="与GMT的联系"><a href="#与GMT的联系" class="headerlink" title="与GMT的联系"></a>与GMT的联系</h4><p>GMT实际上只是一个区时，即0时区的时间，在不需要精确到秒的情况下可视为相同，但两者的实际定义和实现是完全不一样的。</p><h4 id="UTC偏移量"><a href="#UTC偏移量" class="headerlink" title="UTC偏移量"></a>UTC偏移量</h4><p>时间日期联盟组织给世界主要国家和城市都起了一个<code>Time Zone Name</code> 方便沟通，其中中国一般使用<code>CST</code>。而本地时间的计算公式为：</p><pre class="line-numbers language-none"><code class="language-none">本地时间 = UTC标准时间 + 偏移量N<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>偏移量可以表示为<code>UTC -</code> 或 <code>UTC +</code> ，后面接<code>小时数</code> 、<code>分钟数</code> 。如：UTC +9:30表示澳大利亚中央标准时间，UTC +8表示中国标准时间。偏移量常见的表示形式有：<code>±[hh]:[mm]</code>、<code>±[hh][mm]</code>、<code>±[hh]</code>这三种方式均可。</p><p>举个例子：现在UTC时间是<code>10:30z</code>（z表示偏移量=0），那么北京时间现在若是<code>16:30 +0800</code>（下午4点半），对应的纽约时间就是<code>05:30 -0500</code>（早上5点半）。</p><h3 id="ISO-8601：国际标准日期时间表示法"><a href="#ISO-8601：国际标准日期时间表示法" class="headerlink" title="ISO 8601：国际标准日期时间表示法"></a>ISO 8601：国际标准日期时间表示法</h3><p>ISO（International Standard Organization）国际化标准组织制定的日期和时间的标准， 全称为《数据存储和交换形式·信息交换·日期和时间的表示方法》。目前最新为第三版ISO8601:2004，第一版为ISO8601:1988，第二版为ISO8601:2000。 它规定了日期时间的各种表示方法，它的一般原则：</p><ul><li>日期和时间值按从最大到最小的时间单位排序：年，月（或周），日，小时，分钟，秒和秒的分数。因此，表示的字典顺序对应于时间顺序，除了涉及负年份的日期表示。这允许日期自然地由例如文件系统排序。</li><li>每个日期和时间值都有一个固定的位数，必须用<strong>前导零填充</strong>。</li><li>日期时间表示只能有数字或少数特殊字符组成（如“ - ”，“：”，“T”，“W”和“Z”），不允许出现地方写法，如“1月”或“星期四”等。</li><li>表示可以采用两种格式之一完成 - 具有最少数量分隔符的基本格式或添加了分隔符的扩展格式以增强人类可读性。该标准指出“应以纯文本形式避免使用基本格式”。日期值（年，月，周和日）之间使用的分隔符是连字符，而冒号用作时间值（小时，分钟和秒）之间的分隔符。例如，2021年第5个月的第6天可以以扩展格式写为“2021-05-06”，或者以基本格式简称为“20210506”而不含糊不清。</li><li>为了降低准确度，可以从任何日期和时间表示中删除任意数量的值，但是从最小到最重要的顺序。例如，“2021-05”是有效的ISO 8601日期，表示2021年5月（第5个月）。此格式永远不会代表2021年未指定月份的第5天，也不代表从2021年进入2022年。</li><li>ISO 8601使用24小时制。HH:MM:SS.SSS，HH:MM:SS，HH:MM，HH为合规的时间格式。</li><li>如果没有指定与UTC关系则假定是本地时间，为安全的跨时区通讯，应制定与UTC关系。若时间是UTC则在时间后面加Z表示，如“09:30UTC”表示为09：30Z”或“0930Z”。其它时区时间则将与UTC的偏移量附加到时间后面，格式为±[hh]：[mm]，±[hh] [mm]或±[hh]，如“北京时间09:30”表示为”09:30+08:00”或“ 09:30+0800 ” 或“ 09:30+08 ”。</li><li>用字母T分割日期和时间。如20210517T124426Z或2021-05-17T12:44:26Z 。有些后台返回值会出现这种情况，需要注意。</li></ul><h3 id="DST：夏令时"><a href="#DST：夏令时" class="headerlink" title="DST：夏令时"></a>DST：夏令时</h3><p>DST（Daylight Saving Time）夏令时，表示为了节约能源，人为规定时间的意思。也叫夏时制，夏时令，又称“日光节约时制”和“夏令时间”，在这一制度实行期间所采用的统一时间称为“夏令时间”。一般在天亮早的夏季人为将时间调快一小时，可以使人早起早睡，减少照明量，以充分利用光照资源，从而节约照明用电。各个采纳夏时制的国家具体规定不同。全世界有近110个国家每年要实行夏令时。有一定节约能源效果，但是繁琐，对低纬度无意义。</p><h3 id="Timestamp：时间戳"><a href="#Timestamp：时间戳" class="headerlink" title="Timestamp：时间戳"></a>Timestamp：时间戳</h3><p>时间戳一般指的UNIX时间，或类UNIX系统（比如Linux、MacOS等）使用的时间表示方式。定义为：从UTC时间的<code>1970-1-1 0:0:0</code>起到现在的总秒数（秒是毫秒、微妙、纳秒的总称）。</p><p>当闰秒发生时，就极有可能出现同一个时间戳表示两个时刻的情况（类似时钟回拨），而且闰秒还没规律所以无法程序式的避免。因此需要一种专门的对时协议来确保：网络时间协议。</p><h4 id="NTP：网络时间协议"><a href="#NTP：网络时间协议" class="headerlink" title="NTP：网络时间协议"></a>NTP：网络时间协议</h4><p>NTP（Network Time Protocol），网络时间协议，是用来使计算机时间同步化的一种协议，它可以使计算机对其服务器或时钟源（如石英钟，GPS等等)做同步化，它可以提供<strong>高精准度</strong>的时间校正（LAN上与标准间差小于1毫秒，WAN上几十毫秒），且可介由加密确认的方式来防止恶毒的协议攻击。NTP的目的是在无序的Internet环境中提供精确和健壮的时间服务，各大操作系统（windows/Linux）对NTP都有实现。</p><h2 id="原生API：Date对象"><a href="#原生API：Date对象" class="headerlink" title="原生API：Date对象"></a>原生API：Date对象</h2><p>参考：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date</a></p><h3 id="创建Date对象"><a href="#创建Date对象" class="headerlink" title="创建Date对象"></a>创建Date对象</h3><p>Date对象只能通过<code>new</code> 操作符创建，若作为普通函数调用则只会返回一个字符串。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>dateString<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>year<span class="token punctuation">,</span> monthIndex <span class="token punctuation">[</span><span class="token punctuation">,</span> day <span class="token punctuation">[</span><span class="token punctuation">,</span> hours <span class="token punctuation">[</span><span class="token punctuation">,</span> minutes <span class="token punctuation">[</span><span class="token punctuation">,</span> seconds <span class="token punctuation">[</span><span class="token punctuation">,</span> milliseconds<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="无参数"><a href="#无参数" class="headerlink" title="无参数"></a>无参数</h4><p>不传参数，则表示创建当前的时间对象。</p><h4 id="Unix时间戳"><a href="#Unix时间戳" class="headerlink" title="Unix时间戳"></a>Unix时间戳</h4><p>返回时间戳对应的时间对象。</p><h4 id="时间戳字符串"><a href="#时间戳字符串" class="headerlink" title="时间戳字符串"></a>时间戳字符串</h4><p>一个符合 <a href="https://tools.ietf.org/html/rfc2822#page-14">RFC2822</a> 或 ISO 8601 日期格式的字符串（其他格式也许也支持，但结果可能与预期不符）。</p><blockquote><p><strong>注意:</strong> 由于浏览器之间的差异与不一致性，强烈不推荐使用<code>Date</code>构造函数来解析日期字符串 (或使用与其等价的<code>Date.parse</code>)。对 RFC 2822 格式的日期仅有约定俗称的支持。 对 ISO 8601 格式的支持中，仅有日期的串 (例如 “1970-01-01”) 会被处理为 UTC 而不是本地时间，与其他格式的串的处理不同。</p></blockquote><h4 id="分别提供日期与时间的每一个成员"><a href="#分别提供日期与时间的每一个成员" class="headerlink" title="分别提供日期与时间的每一个成员"></a>分别提供日期与时间的每一个成员</h4><ul><li>year</li></ul><p>表示年份的整数值。 0到99会被映射至1900年至1999年，其它值代表实际年份。</p><ul><li>monthIndex</li></ul><p>表示月份的整数值，<strong>从 0（1月）到 11（12月）</strong>。</p><ul><li>date可选</li></ul><p>表示一个月中的第几天的整数值，从1开始。默认值为1。</p><ul><li><code>hours</code> 可选</li></ul><p>表示一天中的小时数的整数值 (24小时制)。默认值为0（午夜）。</p><ul><li><code>minutes</code> 可选</li></ul><p>表示一个完整时间（如 01:10:00）中的分钟部分的整数值。默认值为0。</p><ul><li><code>seconds</code> 可选</li></ul><p>表示一个完整时间（如 01:10:00）中的秒部分的整数值。默认值为0。</p><ul><li><code>milliseconds</code> 可选</li></ul><p>表示一个完整时间的毫秒部分的整数值。默认值为0。</p><h3 id="常用静态方法"><a href="#常用静态方法" class="headerlink" title="常用静态方法"></a>常用静态方法</h3><h4 id="Date-now"><a href="#Date-now" class="headerlink" title="Date.now()"></a>Date.now()</h4><p>返回当前时间戳</p><h4 id="Date-UTC-year-monthIndex-day-hours-minutes-seconds-milliseconds"><a href="#Date-UTC-year-monthIndex-day-hours-minutes-seconds-milliseconds" class="headerlink" title="Date.UTC(year, monthIndex [, day [, hours [, minutes [, seconds [, milliseconds]]]]])"></a>Date.UTC(year, monthIndex [, day [, hours [, minutes [, seconds [, milliseconds]]]]])</h4><p>转化时间为时间戳</p><h3 id="常用实例方法"><a href="#常用实例方法" class="headerlink" title="常用实例方法"></a>常用实例方法</h3><h4 id="Date-prototype-getTime"><a href="#Date-prototype-getTime" class="headerlink" title="Date.prototype.getTime()"></a>Date.prototype.getTime()</h4><p>获取时间戳</p><h4 id="Date-prototype-getFullYear"><a href="#Date-prototype-getFullYear" class="headerlink" title="Date.prototype.getFullYear()"></a>Date.prototype.getFullYear()</h4><p>返回四位数年份</p><h4 id="Date-prototype-getMonth"><a href="#Date-prototype-getMonth" class="headerlink" title="Date.prototype.getMonth()"></a>Date.prototype.getMonth()</h4><p>返回第几月份（0-11），0代表1月</p><h4 id="Date-prototype-getDate"><a href="#Date-prototype-getDate" class="headerlink" title="Date.prototype.getDate()"></a>Date.prototype.getDate()</h4><p>返回月份中的第几天（1-31）</p><h4 id="Date-prototype-getHours"><a href="#Date-prototype-getHours" class="headerlink" title="Date.prototype.getHours()"></a>Date.prototype.getHours()</h4><p>返回小时数（0-23）</p><h4 id="Date-prototype-getMinutes"><a href="#Date-prototype-getMinutes" class="headerlink" title="Date.prototype.getMinutes()"></a>Date.prototype.getMinutes()</h4><p>返回分钟（0-59）</p><h4 id="Date-prototype-getSeconds"><a href="#Date-prototype-getSeconds" class="headerlink" title="Date.prototype.getSeconds()"></a>Date.prototype.getSeconds()</h4><p>返回秒数（0-59）</p><h4 id="Date-prototype-Milliseconds"><a href="#Date-prototype-Milliseconds" class="headerlink" title="Date.prototype.Milliseconds()"></a>Date.prototype.Milliseconds()</h4><p>返回毫秒数（0-999）</p><h4 id="Date-prototype-getDay"><a href="#Date-prototype-getDay" class="headerlink" title="Date.prototype.getDay()"></a>Date.prototype.getDay()</h4><p>返回星期中的第几天（0-6），0代表周日</p><h4 id="Date-prototype-valueOf"><a href="#Date-prototype-valueOf" class="headerlink" title="Date.prototype.valueOf()"></a>Date.prototype.valueOf()</h4><p>返回时间戳</p><h2 id="流行时间处理库"><a href="#流行时间处理库" class="headerlink" title="流行时间处理库"></a>流行时间处理库</h2><p><a href="https://date-fns.org/">date-fns</a>，<a href="https://dayjs.gitee.io/zh-CN/">day.js</a>，<a href="http://momentjs.cn/">moment.js</a>作为三个最流行的时间处理库，他们的对比结果如下：<a href="https://npmcompare.com/compare/date-fns,dayjs,moment">NPMCompare</a></p><p>结论：</p><ol><li><code>moment.js</code>已确认不再高强度维护：<a href="https://momentjs.com/docs/#/-project-status/">https://momentjs.com/docs/#/-project-status/</a>，因此不推荐继续在项目中使用。</li><li><code>day.js</code> 与<code>moment.js</code> 有相同的API，能快速从<code>moment.js</code> 迁移，学习成本低，支持不可变数据、链式操作、国际化，全浏览器兼容，且仅有2kb大小，推荐使用。</li><li><code>date-fns</code> 支持模块化按需加载，体积可以最小化，若在某个工具库里面或只用到某个功能，推荐使用<code>date-fns</code>。</li><li><code>day.js</code> 适合项目中使用，特别是替换常见UI组件库的<code>moment.js</code>，<code>date-fns</code> 适合单独使用时间工具函数的场景。</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 前端基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2021/05/11/hello-world/"/>
      <url>2021/05/11/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 技术漫游 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
